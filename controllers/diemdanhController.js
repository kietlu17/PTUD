const { DiemDanh, GiaoVien, Lop, HocSinh } = require('../models');

/**
 * üß≠ Hi·ªÉn th·ªã dashboard ƒëi·ªÉm danh cho gi√°o vi√™n
 * - Danh s√°ch kh·ªëi/l·ªõp m√† gi√°o vi√™n ph·ª• tr√°ch
 */
async function showDiemDanhDashboard(req, res) {
    const { user } = req.session;

    // 1Ô∏è‚É£ Ki·ªÉm tra quy·ªÅn truy c·∫≠p
    if (!user || user.role !== 'gi√°o vi√™n') {
        return res.redirect('/login');
    }

    const username = user.username;

    try {
        // 2Ô∏è‚É£ T√¨m gi√°o vi√™n hi·ªán t·∫°i d·ª±a theo m√£ GV (username)
        const giaoVien = await GiaoVien.findOne({
            where: { MaGV: username },
            include: [{
                model: Lop,
                as: 'lopPhuTrach', // alias trong index.js
                attributes: ['id', 'TenLop', 'Khoi'],
            }, ],
        });

        if (!giaoVien) {
            return res.render('dashboard-diemdanh', {
                error: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin gi√°o vi√™n ho·∫∑c l·ªõp ph·ª• tr√°ch.',
                giaoVien: null,
                khoiLop: [],
            });
        }

        // Gom nh√≥m l·ªõp theo kh·ªëi (ƒë·ªÉ hi·ªÉn th·ªã accordion)
        const lopData = giaoVien.lopPhuTrach || [];
        const grouped = {};

        lopData.forEach((lop) => {
            const khoi = lop.Khoi || 'Kh√°c';
            if (!grouped[khoi]) grouped[khoi] = [];
            grouped[khoi].push(lop);
        });

        const khoiLop = Object.keys(grouped).map((khoi) => ({
            tenKhoi: `Kh·ªëi ${khoi}`,
            lopList: grouped[khoi],
        }));

        // 3Ô∏è‚É£ Render giao di·ªán
        res.render('dashboard-diemdanh', {
            giaoVien: giaoVien.toJSON(),
            khoiLop,
            error: null,
        });
    } catch (err) {
        console.error('L·ªói khi t·∫£i dashboard ƒëi·ªÉm danh:', err);
        res.render('dashboard-diemdanh', {
            error: 'L·ªói h·ªá th·ªëng, vui l√≤ng th·ª≠ l·∫°i sau.',
            giaoVien: null,
            khoiLop: [],
        });
    }
}

/**
 * üìã L·∫•y danh s√°ch h·ªçc sinh trong 1 l·ªõp
 */
async function getHocSinhTheoLop(req, res) {
    const { idLop } = req.params;
    const { user } = req.session;

    if (!user || user.role !== 'gi√°o vi√™n') {
        return res.status(403).json({ error: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' });
    }

    try {
        const hocSinhList = await HocSinh.findAll({
            where: { id_Lop: idLop },
            attributes: ['id', 'HoVaTen'],
        });

        if (!hocSinhList || hocSinhList.length === 0) {
            return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y h·ªçc sinh trong l·ªõp.' });
        }

        res.json({
            lopId: idLop,
            hocSinhList,
        });
    } catch (err) {
        console.error('L·ªói khi t·∫£i danh s√°ch h·ªçc sinh:', err);
        res.status(500).json({ error: 'L·ªói h·ªá th·ªëng.' });
    }
}

/**
 * üíæ L∆∞u k·∫øt qu·∫£ ƒëi·ªÉm danh
 */
async function luuDiemDanh(req, res) {
    const { danhSach } = req.body; // danhSach: [{id_HocSinh, id_Lop, TrangThai, GhiChu}]
    const { user } = req.session;

    if (!user || user.role !== 'gi√°o vi√™n') {
        return res.status(403).json({ error: 'Truy c·∫≠p b·ªã t·ª´ ch·ªëi.' });
    }

    try {
        if (!Array.isArray(danhSach) || danhSach.length === 0) {
            return res.status(400).json({ error: 'Kh√¥ng c√≥ d·ªØ li·ªáu ƒëi·ªÉm danh.' });
        }

        // Ki·ªÉm tra d·ªØ li·ªáu h·ª£p l·ªá
        const invalid = danhSach.find((d) => !d.TrangThai || !d.id_HocSinh);
        if (invalid) {
            return res.status(400).json({ error: 'C√≥ h·ªçc sinh ch∆∞a ƒë∆∞·ª£c ƒëi·ªÉm danh.' });
        }

        // 1Ô∏è‚É£ L∆∞u ƒëi·ªÉm danh t·ª´ng h·ªçc sinh
        for (const item of danhSach) {
            await DiemDanh.create({
                id_HocSinh: item.id_HocSinh,
                id_GiaoVien: user.id, // t·ª´ session
                id_Lop: item.id_Lop,
                NgayDiemDanh: new Date(),
                TrangThai: item.TrangThai,
                GhiChu: item.GhiChu || null,
            });
        }

        // 2Ô∏è‚É£ Ph·∫£n h·ªìi k·∫øt qu·∫£
        res.json({
            message: 'ƒêi·ªÉm danh th√†nh c√¥ng!',
            status: 'SUCCESS',
        });
    } catch (err) {
        console.error('L·ªói khi l∆∞u ƒëi·ªÉm danh:', err);
        res.status(500).json({ error: 'L·ªói khi l∆∞u d·ªØ li·ªáu ƒëi·ªÉm danh.' });
    }
}

module.exports = {
    showDiemDanhDashboard,
    getHocSinhTheoLop,
    luuDiemDanh,
};