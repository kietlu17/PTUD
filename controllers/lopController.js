const { Sequelize } = require('sequelize');
const { Lop, GiaoVien, HocSinh } = require('../models');

const { render } = require('ejs');

exports.getAllLop = async (req, res) => {
  try {
    const idTruong = req.session.id_truong;
    const dsLop = await Lop.findAll({
      attributes: [
        'id',
        'TenLop',
        // Th√™m s·ªë l∆∞·ª£ng h·ªçc sinh
        [Sequelize.fn('COUNT', Sequelize.col('hocsinhs.id')), 'SoLuongHocSinh'],
      ],
      where: { id_truong: idTruong },
      include: [
        {
          model: GiaoVien,
          as: 'gvcn',
          attributes: ['id', 'HoVaTen'],
        },
        {
          model: HocSinh,
          as: 'hocsinhs',
          attributes: [],
          required: false, // üëà ƒë·ªÉ l·∫•y l·ªõp kh√¥ng c√≥ h·ªçc sinh
        },
      ],
      group: ['Lop.id', 'gvcn.id'], // üëà group theo l·ªõp & gi√°o vi√™n
      subQuery: false, // üëà tr√°nh Sequelize sinh subquery l√†m m·∫•t count
      raw: true,       // üëà √©p tr·∫£ d·ªØ li·ªáu "ph·∫≥ng" d·ªÖ truy c·∫≠p
      nest: true,      // üëà n·∫øu mu·ªën gi·ªØ c·∫•u tr√∫c l·ªìng (lop.gvcn)
    });

    res.status(200).render('quanlylop', { dsLop });
  } catch (error) {
    console.error('L·ªói khi l·∫•y danh s√°ch l·ªõp:', error);
    res.status(500).json({ message: 'L·ªói m√°y ch·ªß', error: error.message });
  }
};

exports.getHocSinhByLop = async (req, res) => {
  try {
    const id = req.params.id;
    console.log( id )
    // Ki·ªÉm tra l·ªõp c√≥ t·ªìn t·∫°i kh√¥ng
    const lop = await Lop.findByPk(id, {
      include: [
        { model: GiaoVien, as: 'gvcn', attributes: ['id', 'HoVaTen'] },
      ],
    });

    if (!lop) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y l·ªõp n√†y' });
    }

    // L·∫•y danh s√°ch h·ªçc sinh thu·ªôc l·ªõp ƒë√≥
    const dsHocSinh = await HocSinh.findAll({
      where: { id_Lop: id },
      attributes: ['id', 'HoVaTen', 'NgaySinh', 'GioiTinh'],
      order: [['HoVaTen', 'ASC']],
    });

    res.status(200).render('danhsachlop', {
      lop,
      dsHocSinh,
    });
  } catch (error) {
    console.error('L·ªói khi l·∫•y danh s√°ch h·ªçc sinh:', error);
    res.status(500).json({ message: 'L·ªói m√°y ch·ªß', error: error.message });
  }

  // Hi·ªÉn th·ªã form chuy·ªÉn l·ªõp

};

exports.showChuyenLopForm = async (req, res) => {
  try {
    const { id } = req.params;
    const hocSinh = await HocSinh.findByPk(id, {
      include: [{ model: Lop, as: 'lop', attributes: ['id', 'TenLop'] }]
    });

    if (!hocSinh) {
      return res.status(404).send('Kh√¥ng t√¨m th·∫•y h·ªçc sinh');
    }

    const dsLop = await Lop.findAll({ attributes: ['id', 'TenLop'] });

    res.render('chuyenlop', { hocSinh, dsLop });
  } catch (error) {
    console.error('L·ªói khi hi·ªÉn th·ªã form chuy·ªÉn l·ªõp:', error);
    res.status(500).send('L·ªói m√°y ch·ªß');
  }
};

// X·ª≠ l√Ω c·∫≠p nh·∫≠t l·ªõp cho h·ªçc sinh
exports.handleChuyenLop = async (req, res) => {
  try {
    const { id } = req.params;
    const { id_lop_moi } = req.body;

    const hocSinh = await HocSinh.findByPk(id);
    if (!hocSinh) {
      return res.status(404).send('Kh√¥ng t√¨m th·∫•y h·ªçc sinh');
    }

    await hocSinh.update({ id_Lop: id_lop_moi });

    res.redirect(`/admin/quanlylop/${id_lop_moi}/hocsinh`);
  } catch (error) {
    console.error('L·ªói khi chuy·ªÉn l·ªõp:', error);
    res.status(500).send('L·ªói m√°y ch·ªß');
  }
};
