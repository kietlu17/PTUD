const { ThanhToanHocPhi , PhuHuynh, HocSinh } = require('../models');

// H√†m hi·ªÉn th·ªã danh s√°ch c√¥ng n·ª£ theo k·ª≥/nƒÉm h·ªçc
async function showPaymentDashboard(req, res) {
    const { user } = req.session;

    // 1. Ti·ªÅn ƒëi·ªÅu ki·ªán: Ki·ªÉm tra ƒëƒÉng nh·∫≠p
    if (!user || user.role !== 'ph·ª• huynh') {
        return res.redirect('/login');
    }
    
    // L·∫•y id_HocSinh t·ª´ session (ƒë√£ l∆∞u ·ªü b∆∞·ªõc ƒëƒÉng nh·∫≠p)
    // const hocSinhId = user.hocSinhId; 
    //  S·ª¨A L·ªñI: Kh√¥ng d·ª±a v√†o hocSinhId t·ª´ session n·ªØa
    const username = user.username;

    try {
        // if (!hocSinhId) {
        //     return res.render('payment-dashboard', { 
        //         error: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin h·ªçc sinh li√™n quan.', 
        //         payments: [] 
        //     });
        // }

        // 1. T√¨m id_HocSinh li√™n quan qua PhuHuynh
        const phuHuynh = await PhuHuynh.findOne({
            where: { MaPH: username }, // D√πng username (MaPH) ƒë·ªÉ t√¨m
            attributes: [], // Kh√¥ng c·∫ßn l·∫•y thu·ªôc t√≠nh c·ªßa PhuHuynh
            include: [{ 
                model: HocSinh, 
                as: 'hocsinh', 
                attributes: ['id'] // Ch·ªâ c·∫ßn l·∫•y id c·ªßa h·ªçc sinh
            }],
        });

        const hocSinhId = phuHuynh?.hocsinh?.id; // L·∫•y id c·ªßa h·ªçc sinh li√™n quan
        
        if (!hocSinhId) {
            // L·ªói n√†y gi·ªù c√≥ th·ªÉ l√† do thi·∫øu d·ªØ li·ªáu MaPH trong CSDL
            return res.render('payment-dashboard', { 
                error: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin h·ªçc sinh li√™n quan.', 
                payments: [] 
            });
        }

        // 2. L·∫•y danh s√°ch c√¥ng n·ª£ t·ª´ CSDL (ENTITY_CONGNO)
        const payments = await ThanhToanHocPhi.findAll({
            where: { id_HocSinh: hocSinhId },
            order: [['NamHoc', 'DESC'], ['HocKy', 'DESC']],
        });

        // 3. Hi·ªÉn th·ªã giao di·ªán
        res.render('payment-dashboard', { 
            error: null, 
            payments: payments,
            phuHuynh: phuHuynh,
            // Th√™m logic t·ªïng h·ª£p n·∫øu c·∫ßn: V√≠ d·ª• t√≠nh t·ªïng c√¥ng n·ª£
            totalCongNo: payments.reduce((sum, p) => sum + (p.CongNo - p.TienDaNop), 0),
        });

    } catch (err) {
        console.error('L·ªói CSDL khi truy v·∫•n c√¥ng n·ª£:', err);
        // 4. Alternative flow: L·ªói CSDL
        res.render('payment-dashboard', { 
            error: 'L·ªói h·ªá th·ªëng, vui l√≤ng th·ª≠ l·∫°i sau.', 
            payments: [] 
        });
    }
}

async function getPaymentDetails(req, res) {
    
}

// H√†m n√†y s·∫Ω ƒë∆∞·ª£c d√πng cho vi·ªác kh·ªüi t·∫°o thanh to√°n (b∆∞·ªõc sau)
async function initiatePayment(req, res) {
const { paymentId } = req.body; // id c·ªßa b·∫£n ghi ThanhToanHocPhi
    const { user } = req.session;

    if (!user || user.role !== 'ph·ª• huynh') {
        return res.status(403).json({ error: 'Truy c·∫≠p b·ªã t·ª´ ch·ªëi.' });
    }

    try {
        const payment = await ThanhToanHocPhi.findByPk(paymentId);

        if (!payment) {
            return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin c√¥ng n·ª£.' });
        }
        
        const conNoHienTai = payment.CongNo - payment.TienDaNop;

        // üö® B∆Ø·ªöC 1: Ki·ªÉm tra C√¥ng n·ª£ (Theo ƒë·∫∑c t·∫£ [cite: 8, 10])
        if (conNoHienTai <= 0) {
             // Alternative flow: Kh√¥ng c√≤n c√¥ng n·ª£ c·∫ßn thanh to√°n
             return res.status(200).json({ 
                 message: 'Kh√¥ng c√≤n h·ªçc ph√≠ c·∫ßn thanh to√°n cho k·ª≥ n√†y.', 
                 status: 'NO_DEBT' 
             });
        }
        
        // üö® B∆Ø·ªöC 2: X·ª≠ l√Ω hi·ªÉn th·ªã m√£ QR (Theo ƒë·∫∑c t·∫£ [cite: 8, 10])
        // Gi·∫£ l·∫≠p logic: C·∫≠p nh·∫≠t tr·∫°ng th√°i ch·ªù thanh to√°n (n·∫øu c√≥)
        // payment.TrangThai = 'ƒêang ch·ªù thanh to√°n'; 
        // await payment.save();

        // Tr·∫£ v·ªÅ d·ªØ li·ªáu c·∫ßn thi·∫øt ƒë·ªÉ t·∫°o/hi·ªÉn th·ªã m√£ QR tr√™n giao di·ªán
        return res.json({ 
            message: 'Vui l√≤ng s·ª≠ d·ª•ng m√£ QR ƒë·ªÉ thanh to√°n.', 
            qrData: `ThanhToan|${payment.id}|SoTien=${conNoHienTai}`, // D·ªØ li·ªáu gi·∫£ l·∫≠p QR
            amount: conNoHienTai,
            status: 'QR_DISPLAYED'
        });

    } catch (err) {
        console.error('L·ªói khi x·ª≠ l√Ω thanh to√°n:', err);
        [cite_start]// Exception: L·ªói CSDL [cite: 8, 10]
        return res.status(500).json({ error: 'L·ªói CSDL, vui l√≤ng th·ª≠ l·∫°i sau.' });
    }
}


module.exports = { showPaymentDashboard, getPaymentDetails, initiatePayment };